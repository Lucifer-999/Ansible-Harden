---
- hosts: all
  name: Harden
  become: true
  gather_facts: false
  vars:
    # system accounts that do not get their login disabled and pasword changed
    os_always_ignore_users: ['root', 'sync', 'shutdown', 'halt']

    auditd_config_file: '/etc/audit/rules.d/docker.rules'

    ssh_host_keys_dir: '/etc/ssh'
    sshd_moduli_file: '/etc/ssh/moduli'
    sshd_moduli_minimum: 2048

    sysctl_config:
      # These settings eliminate an entire class of security vulnerabilities:
      fs.protected_hardlinks: 1
      fs.protected_symlinks: 1
      fs.suid_dumpable: 0
      kernel.core_uses_pid: 1
      kernel.kptr_restrict: 2
      kernel.kexec_load_disabled: 1
      kernel.sysrq: 0
      kernel.randomize_va_space: 2
      kernel.yama.ptrace_scope: 1
      net.ipv4.ip_forward: 1
      net.ipv6.conf.all.forwarding: 0
      net.ipv4.conf.all.rp_filter: 1
      net.ipv4.conf.default.rp_filter: 1
      net.ipv4.icmp_echo_ignore_broadcasts: 1
      net.ipv4.icmp_ignore_bogus_error_responses: 1
      net.ipv4.icmp_ratelimit: 100
      net.ipv4.icmp_ratemask: 88089
      net.ipv4.tcp_timestamps: 0
      net.ipv4.conf.all.arp_ignore: 1
      net.ipv4.conf.all.arp_announce: 2
      net.ipv4.tcp_rfc1337: 1
      net.ipv4.tcp_syncookies: 1
      net.ipv4.conf.all.shared_media: 1
      net.ipv4.conf.default.shared_media: 1
      net.ipv4.conf.all.accept_source_route: 0
      net.ipv4.conf.default.accept_source_route: 0
      net.ipv6.conf.all.accept_source_route: 0
      net.ipv6.conf.default.accept_source_route: 0
      net.ipv4.conf.all.send_redirects: 0
      net.ipv4.conf.default.send_redirects: 0
      net.ipv4.conf.all.log_martians: 1
      net.ipv4.conf.default.log_martians: 1
      net.ipv4.conf.default.accept_redirects: 0
      net.ipv4.conf.all.accept_redirects: 0
      net.ipv4.conf.all.secure_redirects: 0
      net.ipv4.conf.default.secure_redirects: 0
      net.ipv6.conf.default.accept_redirects: 0
      net.ipv6.conf.all.accept_redirects: 0
      net.ipv6.conf.all.accept_ra: 0
      net.ipv6.conf.default.accept_ra: 0
      net.ipv6.conf.default.router_solicitations: 0
      net.ipv6.conf.default.accept_ra_rtr_pref: 0
      net.ipv6.conf.default.accept_ra_pinfo: 0
      net.ipv6.conf.default.accept_ra_defrtr: 0
      net.ipv6.conf.default.autoconf: 0
      net.ipv6.conf.default.dad_transmits: 0
      net.ipv6.conf.default.max_addresses: 1
      vm.mmap_min_addr: 65536
      vm.mmap_rnd_bits: 32
      vm.mmap_rnd_compat_bits: 16

  

  tasks:
    
    # Install and Configure Auditd
    - name: Install auditd package
      package:
        name: 'auditd'
        state: 'present'

    - name: Configure auditd | package-08
      ansible.builtin.copy:
        src: 'files/auditd.conf'
        dest: '/etc/audit/auditd.conf'
        owner: 'root'
        group: 'root'
        mode: '0640'
    

    # Secure Cron Tasks

    - name: Find cron files and directories
      find:
        paths:
          - /etc
        patterns:
          - cron.hourly
          - cron.daily
          - cron.weekly
          - cron.monthly
          - cron.d
          - crontab
        file_type: any
      register: cron_directories

    - name: Ensure permissions on cron files and directories are configured
      ansible.builtin.file:
        path: "{{ item.path }}"
        owner: root
        group: root
        mode: og-rwx
      with_items: "{{ cron_directories.files }}"

    

    - name: Create login.defs
      ansible.builtin.copy:
        src: 'files/login.defs'
        dest: '/etc/login.defs'
        owner: 'root'
        group: 'root'
        mode: '0444'


    # Minimise Access
    - name: Find files with write-permissions for group
      shell: "find -L {{ item }} -perm /go+w -type f"  
      with_flattened:
        - '/usr/local/sbin'
        - '/usr/local/bin'
        - '/usr/sbin'
        - '/usr/bin'
        - '/sbin'
        - '/bin'
      register: minimize_access_directories
      ignore_errors: true
      changed_when: false

    - name: Minimize access on found files
      file:
        path: '{{ item.1 }}'
        mode: 'go-w'
        state: file
      with_subelements:
        - "{{ minimize_access_directories.results }}"
        - stdout_lines

    - name: Change shadow ownership to root and mode to 0600
      file:
        dest: '/etc/shadow'
        owner: root
        group: shadow
        mode: '0640'
    
    - name: Change passwd ownership to root and mode to 0644
      file:
        dest: '/etc/passwd'
        owner: root
        group: root
        mode: '0644'

    - name: Set option hidepid for proc filesystem
      mount:
        path: /proc
        src: proc
        fstype: proc
        opts: 'rw,nosuid,nodev,noexec,relatime,hidepid=2'
        state: present
    
    - name: Change su-binary to only be accessible to user and group root
      file:
        dest: '/bin/su'
        owner: 'root'
        group: 'root'
        mode: '0750'


    # PAM Harden

    - name: Remove pam ccreds to disable password caching
      package:
        name: 'libpam-ccreds'
        state: 'absent'

    - name: Install the package for strong password checking
      apt:
        name: 'libpam-passwdqc'
        state: 'present'
        update_cache: 'yes'

    - name: Configure passwdqc
      ansible.builtin.copy:
        src: 'files/passwdqc'
        dest: '/usr/share/pam-configs/passwdqc'
        mode: '0644'
        owner: 'root'
        group: 'root'

    - name: Install tally2
      apt:
        name: 'libpam-modules'
        state: 'present'

    - name: Configure tally2
      ansible.builtin.copy:
        src: 'files/tally2'
        dest: '/usr/share/pam-configs/tally2'
        mode: '0644'
        owner: 'root'
        group: 'root'

    - name: Update pam on Debian systems
      command: 'pam-auth-update --package'
      environment:
        DEBIAN_FRONTEND: noninteractive
      changed_when: false


    # Modprobe Harden

    - name: Install modprobe to disable filesystems
      package:
        name: 'kmod'
        state: 'present'

    - name: Disable unused filesystems
      ansible.builtin.copy:
        src: 'files/dev-sec.conf'
        dest: '/etc/modprobe.d/dev-sec.conf'
        owner: 'root'
        group: 'root'
        mode: '0644'



    - name: Add pinerolo_profile.sh to profile.d
      ansible.builtin.copy:
        src: 'files/pinerolo_profile.sh'
        dest: '/etc/profile.d/pinerolo_profile.sh'
        owner: 'root'
        group: 'root'
        mode: '0750'



    - name: Create securetty
      ansible.builtin.copy:
        src: 'files/securetty'
        dest: '/etc/securetty'
        owner: 'root'
        group: 'root'
        mode: '0400'



    - name: Remove suid/sgid bit from binaries in blacklist | os-06
      file:
        path: '{{ item }}'
        mode: 'a-s'
        state: 'file'
        follow: 'yes'
      failed_when: false
      with_flattened:
         # blacklist as provided by NSA
        - '/usr/bin/rcp'
        - '/usr/bin/rlogin'
        - '/usr/bin/rsh'
        # sshd must not use host-based authentication (see ssh cookbook)
        - '/usr/libexec/openssh/ssh-keysign'
        - '/usr/lib/openssh/ssh-keysign'
        # misc others
        - '/sbin/netreport'                                            # not normally required for user
        - '/usr/sbin/usernetctl'                                       # modify interfaces via functional accounts
        # connecting to ...
        - '/usr/sbin/userisdnctl'                                      # no isdn...
        - '/usr/sbin/pppd'                                             # no ppp / dsl ...
        # lockfile
        - '/usr/bin/lockfile'
        - '/usr/bin/mail-lock'
        - '/usr/bin/mail-unlock'
        - '/usr/bin/mail-touchlock'
        - '/usr/bin/dotlockfile'
        # need more investigation blacklist for now
        - '/usr/bin/arping'
        - '/usr/sbin/uuidd'
        - '/usr/bin/mtr'                                               # investigate current state...
        - '/usr/lib/evolution/camel-lock-helper-1.2'                   # investigate current state...
        - '/usr/lib/pt_chown'                                          # pseudo-tty needed?
        - '/usr/lib/eject/dmcrypt-get-device'
        - '/usr/lib/mc/cons.saver'


    # Sysctl Harden

    - name: Protect sysctl.conf
      file:
        path: '/etc/sysctl.conf'
        owner: 'root'
        group: 'root'
        mode: '0440'
        state: touch
        modification_time: preserve
        access_time: preserve

    - name: Install initramfs-tools
      apt:
        name: 'initramfs-tools'
        state: 'present'
        update_cache: true

    - name: Rebuild initramfs with starting pack of modules, if module loading at runtime is disabled
      ansible.builtin.copy:
        src: 'files/modules'
        dest: '/etc/initramfs-tools/modules'
        owner: 'root'
        group: 'root'
        mode: '0440'
      register: initramfs

    - name: Change various sysctl-settings, look at the sysctl-vars file for documentation
      sysctl:
        name: '{{ item.key }}'
        value: '{{ item.value }}'
        sysctl_set: true
        state: present
        reload: true
        ignoreerrors: true
      with_dict: '{{ sysctl_config }}'

    - name: Apply ufw defaults
      ansible.builtin.copy:
        src: 'files/ufw'
        dest: '/etc/default/ufw'
        mode: '0644'


    # User Accounts Harden

    - name: Delete root pw file /root/.pw (if present)
      file:
        path: /root/.pw
        state: absent

    - name: Get UID_MIN from login.defs
      shell: awk '/^\s*UID_MIN\s*([0-9]*).*?$/ {print $2}' /etc/login.defs
      args:
        removes: /etc/login.defs
      register: uid_min
      check_mode: false
      changed_when: false

    - name: Calculate UID_MAX from UID_MIN by substracting 1
      set_fact:
        uid_max: '{{ uid_min.stdout | int - 1 }}'

    - name: Get all system accounts
      command: awk -F'':'' '{ if ( $3 <= {{ uid_max|quote }} ) print $1}' /etc/passwd
      args:
        removes: /etc/passwd
      changed_when: false
      check_mode: false
      register: sys_accs

    - name: Remove always ignored system accounts from list
      set_fact:
        sys_accs_cond: '{{ sys_accs.stdout_lines | difference(os_always_ignore_users) }}'
      check_mode: false

    - name: Change system accounts not on the user provided ignore-list
      user:
        name: '{{ item }}'
        shell: '/usr/sbin/nologin'
        password: '*'
        createhome: false
      with_flattened:
        - '{{ sys_accs_cond | default([]) | list }}'

    - name: get all home directories in /home, but skip ignored users
      find:
        paths: /home/
        recurse: false
        file_type: directory
        excludes: "lost+found"
      register: home_directories

    - name: set ownership of /home directories to 0700
      file:
        mode: 0700
        path: "/home/ubuntu"
        state: directory

    - name: Get user accounts
      command: "awk -F: '{print $1}' /etc/passwd"
      changed_when: false
      check_mode: false
      register: users_accounts

    - name: Delete rhosts-files from system
      file:
        dest: '~{{ item }}/.rhosts'
        state: 'absent'
      with_flattened: '{{ users_accounts.stdout_lines | default([]) }}'

    - name: Delete hosts.equiv from system
      file:
        dest: '/etc/hosts.equiv'
        state: 'absent'

    - name: Delete .netrc-files from system
      file:
        dest: '~{{ item }}/.netrc'
        state: 'absent'
      with_flattened: '{{ users_accounts.stdout_lines | default([]) }}'


    
    - name: Remove deprecated or insecure packages
      apt:
        name: ['xinetd', 'inetd', 'ypserv', 'telnet-server', 'rsh-server', 'prelink']
        state: 'absent'
        purge: 'yes'
      

    # SSH Harden

    - name: Replace default 2048 bits RSA keypair
      community.crypto.openssh_keypair:
        state: present
        type: rsa
        size: "4096"
        path: "{{ ssh_host_keys_dir }}/ssh_host_rsa_key"
        force: false
        regenerate: partial_idempotence

    - name: Set hostkeys
      set_fact:
        ssh_host_key_files:
          - "{{ ssh_host_keys_dir }}/ssh_host_rsa_key"
          - "{{ ssh_host_keys_dir }}/ssh_host_ecdsa_key"
          - "{{ ssh_host_keys_dir }}/ssh_host_ed25519_key"

    - name: Set macs
      set_fact:
        ssh_macs:  
          - hmac-sha2-512-etm@openssh.com
          - hmac-sha2-256-etm@openssh.com
          - umac-128-etm@openssh.com
          - hmac-sha2-512
          - hmac-sha2-256

    - name: Set ciphers
      set_fact:
        ssh_ciphers: 
          - chacha20-poly1305@openssh.com
          - aes256-gcm@openssh.com
          - aes128-gcm@openssh.com
          - aes256-ctr
          - aes192-ctr
          - aes128-ctr

    - name: Set kex
      set_fact:
        ssh_kex: 
          - sntrup4591761x25519-sha512@tinyssh.org
          - curve25519-sha256@libssh.org
          - diffie-hellman-group-exchange-sha256

    - name: Create revoked_keys and set permissions to root/600
      ansible.builtin.copy:
        src: 'files/revoked_keys'
        dest: '/etc/ssh/revoked_keys'
        mode: '0600'
        owner: 'root'
        group: 'root'

    - name: Create sshd_config and set permissions to root/600
      ansible.builtin.copy:
        src: 'files/sshd_config'
        dest: "/etc/ssh/sshd_config"
        mode: '0600'
        owner: 'root'
        group: 'root'
        validate: '/usr/sbin/sshd -T -C user=root -C host=localhost -C addr=localhost -C lport=22 -f %s'

    - name: Disable dynamic MOTD
      pamd:
        name: sshd
        type: session
        control: optional
        module_path: pam_motd.so
        state: absent
        backup: true

    - name: Create ssh_config and set permissions to root/644
      ansible.builtin.copy:
        src: 'files/ssh_config'
        dest: "/etc/ssh/ssh_config"
        mode: '0644'
        owner: 'root'
        group: 'root'

    - name: Check if {{ sshd_moduli_file }} contains weak DH parameters
      shell: awk '$5 < {{ sshd_moduli_minimum }}' {{ sshd_moduli_file }}
      register: sshd_register_moduli
      changed_when: false
      check_mode: false

    - name: Remove all small primes
      shell: awk '$5 >= {{ sshd_moduli_minimum }}' {{ sshd_moduli_file }} > {{ sshd_moduli_file }}.new ;
            [ -r {{ sshd_moduli_file }}.new -a -s {{ sshd_moduli_file }}.new ] && mv {{ sshd_moduli_file }}.new {{ sshd_moduli_file }} || true


    # Harden Docker

    - name: Ensure a separate partition for containers has been created
      command: "grep /var/lib/docker /etc/fstab"
      changed_when: no
      ignore_errors: yes

    - name: Ensure auditing is configured for the docker daemon
      lineinfile:
        state: present
        create: yes
        dest: "{{ auditd_config_file }}"
        line: "-w /usr/bin/docker -k docker"

    - name: Ensure auditing is configured for Docker files and directories - /var/lib/docker
      lineinfile:
        state: present
        create: yes
        dest: "{{ auditd_config_file }}"
        line: "-w /var/lib/docker -k docker"
      
    - name: Ensure auditing is configured for Docker files and directories - /etc/docker
      lineinfile:
        state: present
        create: yes
        dest: "{{ auditd_config_file }}"
        line: "-w /etc/docker -k docker"
      
    - name: Ensure auditing is configured for Docker files and directories - docker.service
      lineinfile:
        state: present
        create: yes
        dest: "{{ auditd_config_file }}"
        line: "-w /lib/systemd/system/docker.service -k docker"
      
    - name: Ensure auditing is configured for Docker files and directories - docker.socket
      lineinfile:
        state: present
        create: yes
        dest: "{{ auditd_config_file }}"
        line: "-w /lib/systemd/system/docker.socket -k docker"
      
    - name: Ensure auditing is configured for Docker files and directories - /etc/default/docker
      lineinfile:
        state: present
        create: yes
        dest: "{{ auditd_config_file }}"
        line: "-w /etc/default/docker -k docker"
      
    - name: Ensure auditing is configured for Docker files and directories - /etc/docker/daemon.json
      lineinfile:
        state: present
        create: yes
        dest: "{{ auditd_config_file }}"
        line: "-w /etc/docker/daemon.json -k docker"
      
    - name: Ensure auditing is configured for Docker files and directories - /usr/bin/docker-containerd
      lineinfile:
        state: present
        create: yes
        dest: "{{ auditd_config_file }}"
        line: "-w /usr/bin/docker-containerd -k docker"

    - name: Ensure auditing is configured for Docker files and directories - /usr/bin/docker-runc
      lineinfile:
        state: present
        create: yes
        dest: "{{ auditd_config_file }}"
        line: "-w /usr/bin/docker-runc -k docker"
    
    - name: "Ensure network traffic is restricted between containers on the default bridge\n
            Ensure the logging level is set to 'info'\n
            Ensure Docker is allowed to make changes to iptables\n
            Enable user namespace support\n
            Ensure operations on legacy registry (v1) are Disabled\n
            Ensure live restore is Enabled\n
            Ensure Userland Proxy is Disabled\n
            Ensure experimental features are avoided in production\n
            Ensure containers are restricted from acquiring new privileges"
      ansible.builtin.copy:
        src: files/daemon.json
        dest: "/etc/docker/daemon.json"

    # Update/Restart Handlers

    - name: Update-initramfs
      command: 'update-initramfs -u'

    - name: restart-auditd
      command:
        cmd: 'service auditd restart'
        warn: false  # sadly 'service' module fails in that case also by using 'use: service'

    - name: Restart sshd
      service:
        name: 'ssh'
        state: restarted
      become: true

    - name: Restart Docker 
      service:
        name: docker
        state: restarted
